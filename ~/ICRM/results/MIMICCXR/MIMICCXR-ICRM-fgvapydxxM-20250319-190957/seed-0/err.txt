Traceback (most recent call last):
  File "main.py", line 219, in <module>
    step_metrics = algorithm.update(minibatches_device)
  File "/data/healthy-ml/scratch/odahleh/mimic-mil/algorithms.py", line 88, in update
    out = self.predict(x, y)
  File "/data/healthy-ml/scratch/odahleh/mimic-mil/algorithms.py", line 299, in predict
    outputs = self.classifier((x, y, None, past_key_values))
  File "/data/healthy-ml/scratch/odahleh/anaconda3/envs/icrm/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/data/healthy-ml/scratch/odahleh/mimic-mil/networks.py", line 196, in forward
    outputs = self._backbone(inputs_embeds=embeds, past_key_values=past_key_values)
  File "/data/healthy-ml/scratch/odahleh/anaconda3/envs/icrm/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/data/healthy-ml/scratch/odahleh/anaconda3/envs/icrm/lib/python3.8/site-packages/transformers/models/gpt2/modeling_gpt2.py", line 1132, in forward
    outputs = block(
  File "/data/healthy-ml/scratch/odahleh/anaconda3/envs/icrm/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/data/healthy-ml/scratch/odahleh/anaconda3/envs/icrm/lib/python3.8/site-packages/transformers/models/gpt2/modeling_gpt2.py", line 615, in forward
    attn_outputs = self.attn(
  File "/data/healthy-ml/scratch/odahleh/anaconda3/envs/icrm/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/data/healthy-ml/scratch/odahleh/anaconda3/envs/icrm/lib/python3.8/site-packages/transformers/models/gpt2/modeling_gpt2.py", line 332, in forward
    attn_output, attn_weights = self._attn(query, key, value, attention_mask, head_mask)
  File "/data/healthy-ml/scratch/odahleh/anaconda3/envs/icrm/lib/python3.8/site-packages/transformers/models/gpt2/modeling_gpt2.py", line 203, in _attn
    attn_weights = torch.where(causal_mask, attn_weights.to(attn_weights.dtype), mask_value)
RuntimeError: The size of tensor a (3) must match the size of tensor b (10) at non-singleton dimension 3
